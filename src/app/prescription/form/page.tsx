'use client';

import { Form, Input, Select, DatePicker, Button, Typography, Row, Col, message } from 'antd';
import { useState } from 'react';
import dayjs from 'dayjs';
import { mockMedicines } from '@/mock/medicine/mockMedicines'; 

const { Option } = Select;

export default function PrescriptionFormPage() {
  const [form] = Form.useForm();

  const handleMedicineChange = (value: string) => {
    const selected = mockMedicines.find((m) => m.name === value);
    if (selected) {
      form.setFieldsValue({
        dose: selected.defaultDose,
        frequency: selected.defaultFrequency,
        duration: selected.defaultDuration,
        usage: selected.instructions,
      });
    }
  };

  const onFinish = (values: any) => {
    alert('–§–æ—Ä–º –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!');
    console.log('–ñ–æ—Ä—ã–Ω —É—Ç–≥—É—É–¥:', values);
  };

  return (
    <div style={{ maxWidth: 900, margin: '40px auto', padding: 24 }}>
      <Typography.Title level={3}>üìù –≠–º–∏–π–Ω –∂–æ—Ä –±”©–≥–ª”©—Ö</Typography.Title>

      <Form
        layout="vertical"
        form={form}
        onFinish={onFinish}
        initialValues={{ date: dayjs() }}
      >
        <Row gutter={16}>
          <Col xs={24} md={12}>
            <Form.Item name="patientName" label="”®–≤—á—Ç”©–Ω–∏–π –†–µ–≥–∏—Å—Ç—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä" rules={[{ required: true }]}>
              <Input placeholder="–ñ–∏—à—ç—ç: VP04040404" />
            </Form.Item>
          </Col>

          <Col xs={24} md={12}>
            <Form.Item name="date" label="–û–≥–Ω–æ–æ">
              <DatePicker style={{ width: '100%' }} />
            </Form.Item>
          </Col>

          <Col xs={24} md={12}>
            <Form.Item name="medicine" label="–≠–º–∏–π–Ω –Ω—ç—Ä" rules={[{ required: true }]}>
              <Select
                showSearch
                placeholder="–≠–º —Å–æ–Ω–≥–æ–Ω–æ —É—É"
                onChange={handleMedicineChange}
                filterOption={(input, option) =>
                  (option?.label as string).toLowerCase().includes(input.toLowerCase())
                }
                options={mockMedicines.map((med) => ({
                  label: med.name,
                  value: med.name,
                }))}
              />
            </Form.Item>
          </Col>

          <Col xs={24} md={12}>
            <Form.Item name="dose" label="–¢—É–Ω" rules={[{ required: true }]}>
              <Input placeholder="–ñ–∏—à—ç—ç: 500mg" />
            </Form.Item>
          </Col>

          <Col xs={24} md={12}>
            <Form.Item name="frequency" label="–î–∞–≤—Ç–∞–º–∂" rules={[{ required: true }]}>
              <Select placeholder="–•–∏—á–Ω—ç—ç–Ω —É–¥–∞–∞ —É—É—Ö –≤—ç">
                <Option value="once">”®–¥”©—Ä—Ç 1 —É–¥–∞–∞</Option>
                <Option value="twice">”®–¥”©—Ä—Ç 2 —É–¥–∞–∞</Option>
                <Option value="thrice">”®–¥”©—Ä—Ç 3 —É–¥–∞–∞</Option>
              </Select>
            </Form.Item>
          </Col>

          <Col xs={24} md={12}>
            <Form.Item name="duration" label="–•—É–≥–∞—Ü–∞–∞" rules={[{ required: true }]}>
              <Input placeholder="–ñ–∏—à—ç—ç: 7 —Ö–æ–Ω–æ–≥" />
            </Form.Item>
          </Col>

          <Col xs={24}>
            <Form.Item name="usage" label="–•—ç—Ä—ç–≥–ª—ç—Ö –∑–∞–∞–≤–∞—Ä">
              <Input.TextArea rows={3} placeholder="–ñ–∏—à—ç—ç: –•–æ–æ–ª–Ω—ã –¥–∞—Ä–∞–∞ —É—É–Ω–∞" />
            </Form.Item>
          </Col>

          <Col xs={24}>
            <Form.Item name="note" label="–¢—ç–º–¥—ç–≥–ª—ç–ª (–∑–∞–∞–≤–∞–ª –±–∏—à)">
              <Input.TextArea rows={2} placeholder="–ù—ç–º—ç–ª—Ç —Ç—ç–º–¥—ç–≥–ª—ç–ª" />
            </Form.Item>
          </Col>

          <Col xs={24}>
            <Form.Item>
              <Button type="primary" htmlType="submit">
                –ñ–æ—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö
              </Button>
            </Form.Item>
          </Col>
        </Row>
      </Form>
    </div>
  );
}
